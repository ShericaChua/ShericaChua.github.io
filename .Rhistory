# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
)
# Enter code here
# Load required libraries
library(radiant)
library(radiant.data)
library(shiny)
library(leaflet)  # Load the 'leaflet' package
library(ggplot2)  # Load the 'ggplot2' package
# Load the dataset
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv")
# Create a Radiant report
radiant.data(
# Title and description
title = "San Francisco Trees Analysis",
description = "Exploring San Francisco's tree data",
# Sidebar
sidebar = radiant.sidebar(
# Input control: Select Tree Species
selectInput("species", "Select Tree Species",
choices = c("All", unique(data$species_name)),
selected = "All"),
# Render the line chart
renderPlot("line_chart"),
# Render the bar chart
renderPlot("bar_chart"),
# Render the map
renderLeaflet("map")
),
# Main content
main = radiant.main(
# Time series line chart
plotOutput("line_chart"),
# Bar chart
plotOutput("bar_chart"),
# Geographic map
leafletOutput("map")
),
# Shiny Server function
server = function(input, output) {
# Create a reactive dataset filtered by selected species
filtered_data <- reactive({
if (input$species == "All") {
return(data)
} else {
return(subset(data, species_name == input$species))
}
})
# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
)
# Enter code here
# Load required libraries
library(radiant)
library(radiant.data)
library(shiny)
library(leaflet)  # Load the 'leaflet' package
library(ggplot2)  # Load the 'ggplot2' package
# Load the dataset
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv")
# Create a Radiant report
radiant.data(
# Title and description
title = "San Francisco Trees Analysis",
description = "Exploring San Francisco's tree data",
# Sidebar
sidebar = sidebar(
# Input control: Select Tree Species
selectInput("species", "Select Tree Species",
choices = c("All", unique(data$species_name)),
selected = "All"),
# Render the line chart
renderPlot("line_chart"),
# Render the bar chart
renderPlot("bar_chart"),
# Render the map
renderLeaflet("map")
),
# Main content
main = radiant.main(
# Time series line chart
plotOutput("line_chart"),
# Bar chart
plotOutput("bar_chart"),
# Geographic map
leafletOutput("map")
),
# Shiny Server function
server = function(input, output) {
# Create a reactive dataset filtered by selected species
filtered_data <- reactive({
if (input$species == "All") {
return(data)
} else {
return(subset(data, species_name == input$species))
}
})
# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
)
# Enter code here
# Load required libraries
library(radiant)
library(radiant.data)
library(shiny)
library(leaflet)  # Load the 'leaflet' package
library(ggplot2)  # Load the 'ggplot2' package
# Load the dataset
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv")
# Create a Radiant report
radiant.data(
# Title and description
title = "San Francisco Trees Analysis",
description = "Exploring San Francisco's tree data",
# Sidebar
sidebar = radiant.model(
# Input control: Select Tree Species
selectInput("species", "Select Tree Species",
choices = c("All", unique(data$species_name)),
selected = "All"),
# Render the line chart
renderPlot("line_chart"),
# Render the bar chart
renderPlot("bar_chart"),
# Render the map
renderLeaflet("map")
),
# Main content
main = radiant.main(
# Time series line chart
plotOutput("line_chart"),
# Bar chart
plotOutput("bar_chart"),
# Geographic map
leafletOutput("map")
),
# Shiny Server function
server = function(input, output) {
# Create a reactive dataset filtered by selected species
filtered_data <- reactive({
if (input$species == "All") {
return(data)
} else {
return(subset(data, species_name == input$species))
}
})
# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
)
# Enter code here
# Load required libraries
library(radiant)
library(radiant.data)
library(shiny)
library(leaflet)  # Load the 'leaflet' package
library(ggplot2)  # Load the 'ggplot2' package
# Load the dataset
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv")
# Create a Radiant report
radiant.data(
# Title and description
title = "San Francisco Trees Analysis",
description = "Exploring San Francisco's tree data",
# Sidebar
sidebar = radiant(
# Input control: Select Tree Species
selectInput("species", "Select Tree Species",
choices = c("All", unique(data$species_name)),
selected = "All"),
# Render the line chart
renderPlot("line_chart"),
# Render the bar chart
renderPlot("bar_chart"),
# Render the map
renderLeaflet("map")
),
# Main content
main = radiant.main(
# Time series line chart
plotOutput("line_chart"),
# Bar chart
plotOutput("bar_chart"),
# Geographic map
leafletOutput("map")
),
# Shiny Server function
server = function(input, output) {
# Create a reactive dataset filtered by selected species
filtered_data <- reactive({
if (input$species == "All") {
return(data)
} else {
return(subset(data, species_name == input$species))
}
})
# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
)
# Enter code here
# Load required libraries
library(radiant)
library(radiant.data)
library(shiny)
library(leaflet)
library(ggplot2)
# Load the dataset
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv")
# Define UI
ui <- fluidPage(
titlePanel("San Francisco Trees Analysis"),
sidebarLayout(
sidebarPanel(
# Input control: Select Tree Species
selectInput("species", "Select Tree Species",
choices = c("All", unique(data$species_name)),
selected = "All")
),
mainPanel(
plotOutput("line_chart"),
plotOutput("bar_chart"),
leafletOutput("map")
)
)
)
# Define server
server <- function(input, output) {
# Create a reactive dataset filtered by selected species
filtered_data <- reactive({
if (input$species == "All") {
return(data)
} else {
return(subset(data, species_name == input$species))
}
})
# Create a time series line chart
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
# Create a bar chart
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
# Create a geographic map
output$map <- renderLeaflet({
m <- leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
m
})
}
# Run the Shiny app
shinyApp(ui, server)
# Enter code here
# Install and load the tidytuesdayR package (if not already installed)
if (!require("tidytuesdayR")) {
install.packages("tidytuesdayR")
}
library(tidytuesdayR)
# Load other required libraries
library(shiny)
library(radiant.data)
library(ggplot2)
library(dplyr)
library(leaflet)
# Enter code here
# Install and load the tidytuesdayR package (if not already installed)
if (!require("tidytuesdayR")) {
install.packages("tidytuesdayR")
}
library(tidytuesdayR)
# Load other required libraries
library(shiny)
library(radiant.data)
library(ggplot2)
library(dplyr)
library(leaflet)
# Load the data
tuesdata <- tt_load(2020, week = 5)
sf_trees <- tuesdata$sf_trees
# Define UI
ui <- fluidPage(
titlePanel("San Francisco Trees Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Tree Species",
c("All", unique(sf_trees$species_name)),
selected = "All")
),
mainPanel(
plotOutput("line_chart"),
plotOutput("bar_chart"),
leafletOutput("map")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
if (input$species == "All") {
return(sf_trees)
} else {
return(filter(sf_trees, species_name == input$species))
}
})
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
})
}
# Run the Shiny app
shinyApp(ui, server)
# Enter code here
# Install and load the tidytuesdayR package (if not already installed)
if (!require("tidytuesdayR")) {
install.packages("tidytuesdayR")
}
library(tidytuesdayR)
# Load other required libraries
library(shiny)
library(radiant.data)
library(ggplot2)
library(dplyr)
library(leaflet)
# Load the data
tuesdata <- tt_load(2020, week = 5)
sf_trees <- tuesdata$sf_trees
# Define UI
ui <- fluidPage(
titlePanel("San Francisco Trees Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Tree Species",
c("All", unique(sf_trees$species_name)),
selected = "All")
),
mainPanel(
plotOutput("line_chart"),
plotOutput("bar_chart"),
leafletOutput("map")
)
)
)
# Define server
server <- function(input, output) {
filtered_data <- reactive({
if (input$species == "All") {
return(sf_trees)
} else {
return(filter(sf_trees, species_name == input$species))
}
})
output$line_chart <- renderPlot({
ggplot(filtered_data(), aes(x = plant_date)) +
geom_line(stat = "count") +
labs(title = "Tree Planting Over Time", y = "Number of Trees", x = "Planting Date")
})
output$bar_chart <- renderPlot({
ggplot(filtered_data(), aes(x = reorder(species_name, -..count..), y = ..count..)) +
geom_bar() +
labs(title = "Distribution of Tree Species", y = "Number of Trees", x = "Tree Species") +
coord_flip()
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude, label = ~paste("Species: ", species_name))
})
}
# Run the Shiny app
shinyApp(ui, server)
# Enter code here
install.packages("tidytuesdayR")
library(tidytuesdayR)
# Load other required libraries
library(shiny)
library(radiant.data)
library(ggplot2)
library(dplyr)
library(leaflet)
# Load the data
tuesdata <- tt_load(2020, week = 5)
shiny::runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
# Enter code here
read.csv(Street_Tree_Map)
# Enter code here
read.csv("Street_Tree_Map")
# Enter code here
load("Street_Tree_Map")
# Enter code here
load("Street_Tree_Map.csv")
# Enter code here
read.csv("C:\Users\sheri\OneDrive\Documents\school\NUS\NUS Y1\NM2207\Week 11\designbysc\Street_Tree_Map.csv")
# Enter code here
data<-read.csv("C:\Users\sheri\OneDrive\Documents\school\NUS\NUS Y1\NM2207\Week 11\designbysc\Street_Tree_Map.csv")
runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
shiny::runApp('~/school/NUS/NUS Y1/NM2207/Week 11/designbysc')
